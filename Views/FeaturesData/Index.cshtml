@model IEnumerable<GenExRB.Models.CustomData.FeatureData>


@{ 
    <ul>
        @foreach (var featureData in Model)
        {
        <li>KEY:@featureData.Key|VALUE:@featureData.Value1|ACTIONS: </li>
            
        }


    </ul>
    


}



<form id="foo">


    <label for="bar">Add Feature</label>
    <input id="feature" name="feature" type="text" value="" />
    <input type="submit" value="Send" />
</form>


<script>

    // Variable to hold request
    var request;

    // Bind to the submit event of our form
    $("#foo").submit(function (event) {

        // Prevent default posting of form - put here to work in case of errors
        event.preventDefault();

        // Abort any pending request
        if (request) {
            request.abort();
        }
        // setup some local variables
        var $form = $(this);

        // Let's select and cache all the fields
        var $inputs = $form.find("input, select, button, textarea");

        // Serialize the data in the form
        var serializedData = $form.serialize();

        // Let's disable the inputs for the duration of the Ajax request.
        // Note: we disable elements AFTER the form data has been serialized.
        // Disabled form elements will not be serialized.
        $inputs.prop("disabled", true);

        // Fire off the request to /form.php
        request = $.ajax({
            url: "/addfeature",
            type: "post",
            data: serializedData
        });

        // Callback handler that will be called on success
        request.done(function (response, textStatus, jqXHR) {
            // Log a message to the console
           // console.log("Hooray, it worked!");
            console.log(response);
            console.log(response[0].feature);

            //var rep = JSON.parse(response);

            //setTimeout(function () { alert(rep.feature) }, 3000);
            //var rep = JSON.parse(response);

            if (response.length > 0) {
                for (var i = 0; i < response.length; i++) {
                    
                    console.log(response[i].feature);
                    var test1 = response[i].feature;
                    setTimeout(function () { alert(test1) }, 3000);
                }
            }
            
        });

        // Callback handler that will be called on failure
        request.fail(function (jqXHR, textStatus, errorThrown) {
            // Log the error to the console
            console.error(
                "The following error occurred: " +
                textStatus, errorThrown
            );
        });

        // Callback handler that will be called regardless
        // if the request failed or succeeded
        request.always(function () {
            // Reenable the inputs
            $inputs.prop("disabled", false);
        });

    });

</script>